<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.donate.mapper.FeeMapper">
  <resultMap id="BaseResultMap" type="com.example.donate.bean.Fee">
    <id column="fid" jdbcType="VARCHAR" property="fid" />
    <result column="rfe" jdbcType="REAL" property="rfe" />
    <result column="mfe" jdbcType="REAL" property="mfe" />
    <result column="hfe" jdbcType="REAL" property="hfe" />
    <result column="ofe" jdbcType="REAL" property="ofe" />
    <result column="smoney" jdbcType="REAL" property="smoney" />
    <result column="fstate" jdbcType="INTEGER" property="fstate" />
    <result column="sfe" jdbcType="VARCHAR" property="sfe" />
  </resultMap>
  <resultMap id="FeeResultMap" type="com.example.donate.bean.Fee">
    <id column="fid" jdbcType="VARCHAR" property="fid" />
    <result column="rfe" jdbcType="REAL" property="rfe" />
    <result column="mfe" jdbcType="REAL" property="mfe" />
    <result column="hfe" jdbcType="REAL" property="hfe" />
    <result column="ofe" jdbcType="REAL" property="ofe" />
    <result column="smoney" jdbcType="REAL" property="smoney" />
    <result column="fstate" jdbcType="INTEGER" property="fstate" />
    <result column="sfe" jdbcType="VARCHAR" property="sfe" />
    <association property="item" column="iid" select="com.example.donate.mapper.ItemMapper.selectByPrimaryKey"/>
  </resultMap>
  <sql id="Base_Column_List">
    fid, iid, rfe, mfe, hfe, ofe, smoney, fstate, sfe
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="FeeResultMap">
    select *
    from fee as e left join item as d
    on e.iid = d.iid left join apply as a
    on d.aid = a.aid left join hospital as c
    on a.hid = c.hid left join patient as b
    on a.pid = b.pid
    where fid = #{fid,jdbcType=VARCHAR}
  </select>
  <select id="showList" parameterType="java.lang.String" resultMap="FeeResultMap">
   select *
    from fee as e left join item as d
    on e.iid = d.iid left join apply as a
    on d.aid = a.aid left join hospital as c
    on a.hid = c.hid left join patient as b
    on a.pid = b.pid
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from fee
    where fid = #{fid,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.example.donate.bean.Fee">
    insert into fee (fid, iid, rfe, mfe, 
      hfe, ofe, smoney, fstate, 
      sfe)
    values (#{fid,jdbcType=VARCHAR}, #{item.iid,jdbcType=VARCHAR}, #{rfe,jdbcType=REAL}, #{mfe,jdbcType=REAL},
      #{hfe,jdbcType=REAL}, #{ofe,jdbcType=REAL}, #{smoney,jdbcType=REAL}, #{fstate,jdbcType=INTEGER}, 
      #{sfe,jdbcType=REAL})
  </insert>
  <insert id="insertSelective" parameterType="com.example.donate.bean.Fee">
    insert into fee
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="fid != null">
        fid,
      </if>
      <if test="item.iid != null">
        iid,
      </if>
      <if test="rfe != null">
        rfe,
      </if>
      <if test="mfe != null">
        mfe,
      </if>
      <if test="hfe != null">
        hfe,
      </if>
      <if test="ofe != null">
        ofe,
      </if>
      <!--
      <if test="smoney != null">
        smoney,
      </if>
      -->
      <if test="fstate != null">
        fstate,
      </if>
      <if test="rfe != null or mfe != null or hfe != null or ofe != null " >
        sfe,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="fid != null">
        #{fid,jdbcType=VARCHAR},
      </if>
      <if test="item.iid != null">
        #{item.iid,jdbcType=VARCHAR},
      </if>
      <if test="rfe != null">
        #{rfe,jdbcType=REAL},
      </if>
      <if test="mfe != null">
        #{mfe,jdbcType=REAL},
      </if>
      <if test="hfe != null">
        #{hfe,jdbcType=REAL},
      </if>
      <if test="ofe != null">
        #{ofe,jdbcType=REAL},
      </if>
      <!--
      <if test="smoney != null">
        #{smoney,jdbcType=REAL},
      </if>
      -->
      <if test="fstate != null">
        #{fstate,jdbcType=INTEGER},
      </if>
      <if test="rfe != null or mfe != null or hfe != null or ofe != null " >
        #{rfe,jdbcType=REAL} + #{mfe,jdbcType=REAL} + #{hfe,jdbcType=REAL} + #{ofe,jdbcType=REAL}
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.donate.bean.Fee">
    update fee
    <set>
      <if test="item.iid != null">
        iid = #{item.iid,jdbcType=VARCHAR},
      </if>
      <if test="rfe != null">
        rfe = #{rfe,jdbcType=REAL},
      </if>
      <if test="mfe != null">
        mfe = #{mfe,jdbcType=REAL},
      </if>
      <if test="hfe != null">
        hfe = #{hfe,jdbcType=REAL},
      </if>
      <if test="ofe != null">
        ofe = #{ofe,jdbcType=REAL},
      </if>
      <!--
      <if test="smoney != null">
        smoney = #{smoney,jdbcType=REAL},
      </if>
      -->
      <if test="fstate != null">
        fstate = #{fstate,jdbcType=INTEGER},
      </if>
      <if test="rfe != null or mfe != null or hfe != null or ofe != null " >
        sfe = #{rfe,jdbcType=REAL} + #{mfe,jdbcType=REAL} + #{hfe,jdbcType=REAL} + #{ofe,jdbcType=REAL},
      </if>
    </set>
    where fid = #{fid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.donate.bean.Fee">
    update fee
    set iid = #{item.iid,jdbcType=VARCHAR},
      rfe = #{rfe,jdbcType=REAL},
      mfe = #{mfe,jdbcType=REAL},
      hfe = #{hfe,jdbcType=REAL},
      ofe = #{ofe,jdbcType=REAL},
      <!--
      smoney = #{smoney,jdbcType=REAL},
      -->
      fstate = #{fstate,jdbcType=INTEGER},
      sfe = #{rfe,jdbcType=REAL} + #{mfe,jdbcType=REAL} + #{hfe,jdbcType=REAL} + #{ofe,jdbcType=REAL}
    where fid = #{fid,jdbcType=VARCHAR}
  </update>
  <update id="updateSmoney" parameterType="com.example.donate.bean.Fee">
    update fee
    set smoney = (
        select tmp_smoney
        from (
            select iid,sum(sfe) as tmp_smoney
	        from fee
            where fstate = 1
            group by iid
	    )as tmp
    where fee.iid = tmp.iid
    )
  </update>
</mapper>